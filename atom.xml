<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dingdingbai</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-11-08T07:34:20.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Bai bai</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>webpack的使用与配置</title>
    <link href="http://yoursite.com/2016/11/03/webpack%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://yoursite.com/2016/11/03/webpack的使用与配置/</id>
    <published>2016-11-03T11:11:43.000Z</published>
    <updated>2016-11-08T07:34:20.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是Webpack"><a href="#什么是Webpack" class="headerlink" title="什么是Webpack"></a>什么是Webpack</h3><p>WebPack可以看做是模块打包器：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。<br><img src="http://ww1.sinaimg.cn/bmiddle/9bd18299gw1f9f5147i48j21kw0sfaeh.jpg" alt=""><br><a id="more"></a></p>
<h3 id="为什么要使用WebPack"><a href="#为什么要使用WebPack" class="headerlink" title="为什么要使用WebPack"></a>为什么要使用WebPack</h3><p>现今的很多网页其实可以看做是功能丰富的应用，它们拥有着复杂的JavaScript代码和一大堆依赖包。为了简化开发的复杂度，前端社区涌现出了很多好的实践方法<br>模块化，让我们可以把复杂的程序细化为小的文件;<br>优化页面加载，webpack可以将原本需要额外消耗请求的依赖打包放在一个文件里<br>这些改进确实大大的提高了我们的开发效率，但是利用它们开发的文件往往需要进行额外的处理才能让浏览器识别,而手动处理又是非常反锁的，这就为WebPack类的工具的出现提供了需求。</p>
<h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>1.</p>
<p><img src="http://ww4.sinaimg.cn/bmiddle/9bd18299gw1f9f5gee73oj205m02hmx4.jpg" alt=""><br>创建两个文件夹分别为<code>dist</code>和<code>src</code>，将源码(开发文件)放在<code>src</code>这个文件夹里，将生产文件放在<code>dist</code>文件夹里。</p>
<p>2.每个项目下都必须配置有一个<code>webpack.config.js</code>（可以取任意的名字，但是推荐用该配置名），告诉<code>webpack</code>它需要做什么。</p>
<ol>
<li><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm init //生成package.json文件，存放依赖</div></pre></td></tr></table></figure>
</li>
</ol>
<p>4.在安装依赖的时候文件夹中还会多增加一个<code>node_modules</code>的文件夹，里面含有大量的文件，当我们在sublime中添加项目文件夹的时候为了避免因为显示<code>node_modules</code>文件夹而造成卡顿，可以在sublime的<code>preferences-settings-User</code>里面添加下面的配置。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="string">"folder_exclude_patterns"</span>:</div><div class="line">  [</div><div class="line">      <span class="string">"node_modules"</span>,</div><div class="line">  ]</div></pre></td></tr></table></figure></p>
<p>5.添加<code>.gitignore</code>文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">.DS_Store</div><div class="line">node_modules</div></pre></td></tr></table></figure></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先安装<code>webpack</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save webpack //项目文件夹安装</div></pre></td></tr></table></figure></p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>首先来配置webpack.config.js<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">module.exports = &#123;</div><div class="line">  entry:   <span class="string">"./src/main.js"</span>,//唯一入口文件</div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">"dist"</span>),//打包后的文件存放的地方</div><div class="line">    filename: <span class="string">"bundle.js"</span>//打包后输出文件的文件名</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>注：“__dirname”是Node.js中的一个全局变量，它指向当前执行脚本所在的目录。</p>
</blockquote>
<p>现在如果你需要打包文件只需要在终端里你运行webpack命令就可以了，这条命令会自动参考webpack.config.js文件中的配置选项打包你的项目。<br>接下来配置packjson.json<br>在安装那里，我们提到过<code>npm init</code>，一路回车就行了，再打开package.json里面可以看到下面的信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="string">"name"</span>: <span class="string">""</span>,//项目名字，自动生成</div><div class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="string">"description"</span>: <span class="string">""</span>,</div><div class="line">  <span class="string">"scripts"</span>: &#123;</div><div class="line">    //我们需要配置的地方就是这里啦</div><div class="line">  &#125;,</div><div class="line">  <span class="string">"author"</span>: <span class="string">"bai"</span>,</div><div class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</div><div class="line">  <span class="string">"devDependencies"</span>: &#123;</div><div class="line">    <span class="string">"webpack"</span>: <span class="string">"^1.12.9"</span>//所需要用的依赖</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="使用webpack构建本地服务器"><a href="#使用webpack构建本地服务器" class="headerlink" title="使用webpack构建本地服务器"></a>使用webpack构建本地服务器</h3><p>想不想让你的浏览器监测你都代码的修改，并自动刷新修改后的结果，其实Webpack提供一个可选的本地开发服务器，这个本地服务器基于node.js构建，可以实现你想要的这些功能，不过它是一个单独的组件，在webpack中进行配置之前需要单独安装它作为项目依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install –save webapck-dev-server</div></pre></td></tr></table></figure></p>
<p>然后在”script”处配置脚本语言<br> <code>&quot;dev&quot;: &quot;webpack-dev-server --content-base dist --port 6200 --color --progress --hot --inline&quot;</code><br>想要运行这段脚本，需要这样用npm run dev 就可以构建一个服务器了。</p>
<h3 id="Loaders"><a href="#Loaders" class="headerlink" title="Loaders"></a>Loaders</h3><p>通过使用不同的loader，webpack通过调用外部的脚本或工具可以对各种各样的格式的文件进行处理，比如说把ES6转换为现代浏览器可以识别的JS文件。或者使用React开发时，合适的Loaders可以把React的JSX文件转换为JS文件。<br>Loaders需要单独安装并且需要在webpack.config.js下的modules关键字下进行配置，Loaders的配置选项包括以下几方面：</p>
<ul>
<li>test：一个匹配loaders所处理的文件的拓展名的正则表达式（必须）</li>
<li>loader：loader的名称（必须）</li>
<li>include/exclude:手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>
<li>query：为loaders提供额外的设置选项（可选）</li>
</ul>
<h3 id="Babel"><a href="#Babel" class="headerlink" title="Babel"></a>Babel</h3><p>首先安装babel需要的依赖<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save-dev babel-core babel-loader babel-preset-es2015 babel-preset-react</div></pre></td></tr></table></figure></p>
<p>在webpack中的配置如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">"./src/main.jsx"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">"dist"</span>),</div><div class="line">    filename: <span class="string">"bundle.js"</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx$/</span>,</div><div class="line">        loader: <span class="string">"babel"</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>Babel其实可以完全在webpack.config.js中进行配置，但是考虑到babel具有非常多的配置选项，在单一的webpack.config.js文件中进行配置往往使得这个文件显得太复杂，因此一些开发者支持把babel的配置选项放在一个单独的名为 “.babelrc” 的配置文件中。我们现在的babel的配置并不算复杂，不过之后我们会再加一些东西，因此现在我们就提取出相关部分，分两个配置文件进行配置（webpack会自动调用.babelrc里的babel配置选项），如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  &quot;presets&quot;: [&quot;react&quot;, &quot;es2015&quot;]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h3><p>webpack提供两个工具处理样式表<code>css-loader</code>和<code>style-loader</code>，二者处理的任务不同<code>css-loader</code>使你能够使用类似<code>@import</code>和<code>url(...)</code>的方法实现<code>require()</code>的功能,<code>style-loader</code>将所有的计算后的样式加入页面中，二者组合在一起使你能够把样式表嵌入webpack打包后的JS文件中。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install --save style-loader stylus stylus-loader css-loader</div></pre></td></tr></table></figure></p>
<p>在webpack中的配置如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  entry: <span class="string">"./src/main.jsx"</span>,</div><div class="line">  output: &#123;</div><div class="line">    path: path.join(__dirname, <span class="string">"dist"</span>),</div><div class="line">    filename: <span class="string">"bundle.js"</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="built_in">module</span>: &#123;</div><div class="line">    loaders: [</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.jsx$/</span>,</div><div class="line">        loader: <span class="string">"babel"</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">      &#125;,</div><div class="line">       &#123;</div><div class="line">        test: <span class="regexp">/\.styl$/</span>,</div><div class="line">        exclude: <span class="regexp">/node_modules/</span>,</div><div class="line">        loader: <span class="string">"style!css!stylus"</span>,</div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        test: <span class="regexp">/\.css$/</span>,</div><div class="line">        loader: <span class="string">"style!css"</span>,</div><div class="line">      &#125;,</div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>在前面提到过，webpack只有单一的入口，其它的模块需要通过<code>import</code>,<code>require</code>,<code>url</code>等导入相关位置，为了让webpack能找到<code>main.css</code>文件，我们把它导入<code>main.jsx</code>中，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">//main.jsx</div><div class="line">import React from &apos;react&apos;;</div><div class="line">import &#123;render&#125; from &apos;react-dom&apos;;</div><div class="line">import &apos;./scr/main.css&apos;;//使用require导入css文件</div></pre></td></tr></table></figure></p>
<p>以上就是目前使用到的webpack的一些知识啦~后期还会继续完善的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是Webpack&quot;&gt;&lt;a href=&quot;#什么是Webpack&quot; class=&quot;headerlink&quot; title=&quot;什么是Webpack&quot;&gt;&lt;/a&gt;什么是Webpack&lt;/h3&gt;&lt;p&gt;WebPack可以看做是模块打包器：它做的事情是，分析你的项目结构，找到JavaScript模块以及其它的一些浏览器不能直接运行的拓展语言（Scss，TypeScript等），并将其打包为合适的格式以供浏览器使用。&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/bmiddle/9bd18299gw1f9f5147i48j21kw0sfaeh.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>shell指令的总结</title>
    <link href="http://yoursite.com/2016/10/22/shell%E6%8C%87%E4%BB%A4%E7%9A%84%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2016/10/22/shell指令的总结/</id>
    <published>2016-10-22T08:11:57.000Z</published>
    <updated>2016-11-03T11:12:04.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小记"><a href="#小记" class="headerlink" title="小记"></a>小记</h2><p>这篇文章主要是为了帮助自己查阅以及巩固之前所学到的知识，所以有什么写的不全面，或者理解不对的地方，希望可以指出~</p>
<h1 id="SHELL"><a href="#SHELL" class="headerlink" title="SHELL"></a>SHELL</h1><p>所有测试基于<code>bash</code>。shell里面，每个指令有一个返回值，0表示成功，非0表示不成功。上一个指令的返回值可以通过<code>$?</code>去看。</p>
<h2 id="shell变量"><a href="#shell变量" class="headerlink" title="shell变量"></a>shell变量</h2><p>shell变量可以直接使用<code>name=val</code>这种形式来赋值（注意中间没有空格，不能有空格），查看变量的时候，在变量名前面加上<code>$</code>符。<br><a id="more"></a><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">name=dingdingbai</div><div class="line"><span class="built_in">echo</span> <span class="variable">$name</span></div></pre></td></tr></table></figure></p>
<h2 id="文件描述符，流与重定向"><a href="#文件描述符，流与重定向" class="headerlink" title="文件描述符，流与重定向"></a>文件描述符，流与重定向</h2><p>每一个程序默认打开三个流，标准输入，标准输出，标准错误输出。<br>shell使用文件描述符来标识一个流。<br>标准输入： 0<br>标准输出： 1<br>标准错误输出： 2<br>e.g<br>a&gt;b，文件描述a重新定向到b指向的地方。一般是重定向到文件或者设备，<code>/dev/null</code>。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">ls <span class="_">-l</span> &gt; a.txt 2&gt;a.txt</div><div class="line"></div><div class="line">ls <span class="_">-l</span> &gt; a.txt 2&gt;&amp;1</div></pre></td></tr></table></figure></p>
<h2 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h2><p>管道操作符<code>|</code>，可以将一个指令的标准输出连接到另一个指令的标准输入。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls | grep A <span class="comment"># 将当前目录下所有含有A的文件名列出来</span></div></pre></td></tr></table></figure></p>
<h2 id="别名"><a href="#别名" class="headerlink" title="别名"></a>别名</h2><p>别名就是可以给一个指令创建另外一个名字，一般是用来简化指令的，少打几个字符。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">alias</span> cj=ls <span class="comment"># 输入cj相当于输入ls</span></div><div class="line"><span class="built_in">alias</span> <span class="comment"># 直接输入alias，可以看到当前shell中所有的别名</span></div></pre></td></tr></table></figure>
<h2 id="shell通配符"><a href="#shell通配符" class="headerlink" title="shell通配符"></a>shell通配符</h2><p><code>{a..z}</code>会自动扩展。</p>
<p><code>*</code>号shell会替你自动替换。</p>
<h2 id="子shell，环境变量"><a href="#子shell，环境变量" class="headerlink" title="子shell，环境变量"></a>子shell，环境变量</h2><p>环境变量就是当前shell中能够被子shell继承的变量，普通变量不能被继承。在子shell里修改变量，是不会影响父shell的。在父shell中存在的变量，会在子shell继承。</p>
<p>使用指令<code>export name=val</code>将变量导出为环境变量。</p>
<p>用圆括号括起来的指令会在子shell中执行。<code>(ls)</code></p>
<p>变量赋值可以使用这种语法,<code>name=$(ls)</code></p>
<h2 id="一行执行多个指令"><a href="#一行执行多个指令" class="headerlink" title="一行执行多个指令"></a>一行执行多个指令</h2><p>第一种，使用分号。</p>
<p>使用<code>&amp;&amp;</code>或者<code>||</code>号。</p>
<h2 id="常用指令"><a href="#常用指令" class="headerlink" title="常用指令"></a>常用指令</h2><ul>
<li><p><code>cd</code> (changedirectory)改变当前工作目录，后面一般加上你想要更换到的目录<br>e.g</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">cd</span> Documents</div></pre></td></tr></table></figure>
</li>
<li><p><code>pwd</code> (print working directory)打印当前的工作目录，这个指令会显示当前处于哪个目录当中</p>
</li>
<li><p><code>ls</code> (list) 展现当前文件夹下面所有的文件</p>
</li>
<li><p><code>touch</code> 新建一个空的文件，比如touch a.txt，在当前目录下新建一个名叫a.txt的空文件</p>
</li>
<li><p><code>cat</code> + filename  可以直接查看文件里面的内容</p>
</li>
<li><p><code>rm</code>(remove) 删除文件或文件夹</p>
</li>
<li><p><code>mkdir</code> (make directory)创建一个新的文件夹</p>
</li>
<li><p><code>rmdir</code> （make directory)删除空文件，强制删除非空文件夹要使用<code>rm -f [direcoty name]</code></p>
</li>
<li><p><code>open</code> 将文件在finder中显示</p>
</li>
<li><p><code>which</code> 显示指令的绝对路径</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">which</span> ls</div><div class="line">ls: aliased to ls -G</div><div class="line">$ <span class="built_in">which</span> <span class="built_in">cd</span></div><div class="line"><span class="built_in">cd</span>: shell built-in <span class="built_in">command</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>echo</code> 打印字符串到标准输出<br>e.g</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">echo</span> <span class="string">"hello world"</span></div><div class="line">hello world</div></pre></td></tr></table></figure>
</li>
<li><p><code>mv</code> 移动文件</p>
</li>
<li><p><code>ping</code></p>
</li>
<li><p><code>grep</code> ((global search regular expression(RE) and print out the line)<br>全面搜索正则表达式并把行打印出来</p>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;小记&quot;&gt;&lt;a href=&quot;#小记&quot; class=&quot;headerlink&quot; title=&quot;小记&quot;&gt;&lt;/a&gt;小记&lt;/h2&gt;&lt;p&gt;这篇文章主要是为了帮助自己查阅以及巩固之前所学到的知识，所以有什么写的不全面，或者理解不对的地方，希望可以指出~&lt;/p&gt;
&lt;h1 id=&quot;SHELL&quot;&gt;&lt;a href=&quot;#SHELL&quot; class=&quot;headerlink&quot; title=&quot;SHELL&quot;&gt;&lt;/a&gt;SHELL&lt;/h1&gt;&lt;p&gt;所有测试基于&lt;code&gt;bash&lt;/code&gt;。shell里面，每个指令有一个返回值，0表示成功，非0表示不成功。上一个指令的返回值可以通过&lt;code&gt;$?&lt;/code&gt;去看。&lt;/p&gt;
&lt;h2 id=&quot;shell变量&quot;&gt;&lt;a href=&quot;#shell变量&quot; class=&quot;headerlink&quot; title=&quot;shell变量&quot;&gt;&lt;/a&gt;shell变量&lt;/h2&gt;&lt;p&gt;shell变量可以直接使用&lt;code&gt;name=val&lt;/code&gt;这种形式来赋值（注意中间没有空格，不能有空格），查看变量的时候，在变量名前面加上&lt;code&gt;$&lt;/code&gt;符。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于Vim入门的一些小知识以及操作符</title>
    <link href="http://yoursite.com/2016/10/09/Vim%E5%85%A5%E9%97%A8%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2016/10/09/Vim入门知识/</id>
    <published>2016-10-09T10:11:41.000Z</published>
    <updated>2016-11-03T11:00:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vim是什么？"><a href="#Vim是什么？" class="headerlink" title="Vim是什么？"></a>Vim是什么？</h3><blockquote>
<p>Vim - the ubiquitous text editor<br>Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X.</p>
</blockquote>
<h3 id="如何使用Vim"><a href="#如何使用Vim" class="headerlink" title="如何使用Vim?"></a>如何使用Vim?</h3><p>打开终端，输入vim，便可以运行vim编辑器。打开Vim后直接默认进入普通模式，在普通模式下，每一个按键有独特的含义（按下a并不会输入a这个字符），所以这个时候你按键是不会有反应的，按下小i键(insert)或者小a键(append)就可以进入插入模式，这时每个按键就变成了相应字符的输入。按下ESC就可以返回普通模式。<br><a id="more"></a></p>
<h3 id="普通模式下操作符的使用。"><a href="#普通模式下操作符的使用。" class="headerlink" title="普通模式下操作符的使用。"></a>普通模式下操作符的使用。</h3><p>Vim强大的编辑能力就来源于其普通模式命令。学会了这些操作符并且能灵活组合运用的话就可以更加高效的进行文本编辑。接下来就介绍一下实用的指令吧。如果是使用Sublime作为编程工具的话也可以使用一下指令哦。</p>
<ul>
<li><p>简单的移动<br>  <code>h</code>:左<br>  <code>j</code>:下<br>  <code>k</code>:上<br>  <code>l</code>:右<br>使用这些操作符就再也不用在字母键和箭头键之间来回切换啦。<br><code>b</code>(back/光标向前移动一个单词)<br><code>0</code> (光标移动到当前行行首)<br><code>$</code> (光标移动到当前行尾)<br><code>gg</code>（跳转到文档开头）<br><code>G</code>(跳转到文档末尾)<br><code>e</code>(跳转到每个单词的末尾字母)</p>
</li>
<li><p>文本对象</p>
</li>
</ul>
<p><code>w</code> (word/光标向后移动一个单词)<br><code>t</code> (tag)<br><code>&#39;</code> (‘’之间的内容)<br><code>&quot;&quot;</code>(“”之间的内容)<br><code>(,{,[</code>这些也是同样的原理</p>
<ul>
<li>对文档的操作</li>
</ul>
<p><code>d</code> (delete)<br><code>dd</code>(删除全行)<br><code>dw</code> (删除单词)<br><code>xdd</code>(x代表数字，e.g:2dd删除两行)</p>
<p><code>y</code> (yank/复制)<br><code>yy</code> (复制整行)<br><code>xyy</code> (复制x行)</p>
<p>e.g:<br><code>cw</code>(改单词)<br><code>cit</code>(更改标签里的内容)<br><code>ci&quot;</code>(更改””里的内容)<br><code>ci(</code> (更改)</p>
<p><code>p</code>(paste/粘贴)</p>
<p><code>u</code>(undo/撤销)</p>
<p>这些就是简单的Vim操作符啦，也可以说是很常用的，刚用的时候很不习惯，但是用习惯了就会发现这可以大大的提高效率呢！</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vim是什么？&quot;&gt;&lt;a href=&quot;#Vim是什么？&quot; class=&quot;headerlink&quot; title=&quot;Vim是什么？&quot;&gt;&lt;/a&gt;Vim是什么？&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Vim - the ubiquitous text editor&lt;br&gt;Vim is a highly configurable text editor built to make creating and changing any kind of text very efficient. It is included as “vi” with most UNIX systems and with Apple OS X.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;如何使用Vim&quot;&gt;&lt;a href=&quot;#如何使用Vim&quot; class=&quot;headerlink&quot; title=&quot;如何使用Vim?&quot;&gt;&lt;/a&gt;如何使用Vim?&lt;/h3&gt;&lt;p&gt;打开终端，输入vim，便可以运行vim编辑器。打开Vim后直接默认进入普通模式，在普通模式下，每一个按键有独特的含义（按下a并不会输入a这个字符），所以这个时候你按键是不会有反应的，按下小i键(insert)或者小a键(append)就可以进入插入模式，这时每个按键就变成了相应字符的输入。按下ESC就可以返回普通模式。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>如何用flexbox制作一个会动的调色盘</title>
    <link href="http://yoursite.com/2016/09/10/%E5%A6%82%E4%BD%95%E8%BF%90%E7%94%A8flexbox/"/>
    <id>http://yoursite.com/2016/09/10/如何运用flexbox/</id>
    <published>2016-09-10T14:20:13.000Z</published>
    <updated>2016-09-12T12:20:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p>本次的主题就是用实例介绍flexbox的使用——用flex做一个手风琴样式的调色板。这次使用的是在<a href="https://codepen.io" target="_blank" rel="external">codepen</a>发现的好的作品，觉得很适合用来讲解flex的使用，而且这个效果也很实用。</p>
<h3 id="构建框架"><a href="#构建框架" class="headerlink" title="构建框架"></a>构建框架</h3><p>第一步，构建html框架，其中最重要的是要有一个父元素，这样就有了一个“Flex容器”，在它之中所有的子元素自动就成了容器的成员。在本例中我们将容器设置成这样<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"color-list"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>构建好容器后，接下来就是编写子元素。<br><a id="more"></a></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">"color"</span> <span class="attr">style</span>=<span class="string">"background: hsl(4,99%,66%);"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>Persimmon<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"details"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>hsl(4,99%,66%)<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>#FE5E52<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>178 C<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>485 U<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Primary<span class="tag">&lt;/<span class="name">li</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></div></pre></td></tr></table></figure>
<p>以这种形式，复制粘贴就行啦。内容相应的更改。</p>
<h3 id="设置CSS样式"><a href="#设置CSS样式" class="headerlink" title="设置CSS样式"></a>设置CSS样式</h3><p>首先要定义父元素<code>.color－list</code>的display属性。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.color-list</span> &#123;</div><div class="line">    <span class="attribute">display</span>: flex;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个时候初步的框架也就可以看出来了。可以根 据需要自定义高度。<br><img src="http://ww3.sinaimg.cn/large/9bd18299gw1f7qzlwdsl8j20ku01vq2s.jpg" alt=""></p>
<p>第二步，设置<code>.color</code>的display属性。在上文中我们说到使用flex技术需要有一个容器包裹，相对于<code>.color</code>来说，<code>.color-list</code>是他的父元素，对于<code>.color</code>里面的元素来说它也是父元素，想要对<code>.color</code>里面的元素进行操作，就需要将<code>.color</code>的display属性设置成flex.<br>一般情况下，在flex容器内，默认横轴为<code>main axis</code>，所以我们会看到下图的效果。<br><img src="http://ww2.sinaimg.cn/large/9bd18299gw1f7qzdccjmdj20b606odfv.jpg" alt="example">这与我们想要达成的垂直效果不一样，这与此时只需要方向更改就可以了，如下图。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.color-list</span> &#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">flex-direction</span>: column;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><img src="http://ww2.sinaimg.cn/large/9bd18299gw1f7r0vldwewj20ak061aa3.jpg" alt="">修改后的样式。</p>
<p>第三步，下图是这个项目想要达到的动态效果，即当鼠标移到某个色卡上的时候，该色卡会变宽并且显示信息。这个动态效果用flex就可以做出来～<br><img src="http://ww1.sinaimg.cn/large/9bd18299gw1f7r1lb3szag20dc02ldou.gif" alt=""><br>那么怎么在flex中如何给元素加宽呢，这里可以使用<code>flex-basis</code>属性。</p>
<blockquote>
<p>flex-basis属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小.</p>
</blockquote>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"> <span class="selector-class">.color</span><span class="selector-pseudo">:hover</span>&#123; </div><div class="line">  <span class="attribute">flex-basis</span>: <span class="number">20em</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>写到这里已经可以看到动态效果了，但是感觉过渡生硬不流畅，因此相应的增加过度效果就更好了。本文主要讲flex的用法，所在在这里其他的就不多做解释了。</p>
<p>本篇主要是帮助加深巩固flex技术的使用，因此涉及的不是太全面。推荐阮一峰的教程，忘记了，或者不懂的时候可以参考一下。<br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html" target="_blank" rel="external">Flex布局教程：语法篇</a><br><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html" target="_blank" rel="external">Flex布局教程：实例篇</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;p&gt;本次的主题就是用实例介绍flexbox的使用——用flex做一个手风琴样式的调色板。这次使用的是在&lt;a href=&quot;https://codepen.io&quot;&gt;codepen&lt;/a&gt;发现的好的作品，觉得很适合用来讲解flex的使用，而且这个效果也很实用。&lt;/p&gt;
&lt;h3 id=&quot;构建框架&quot;&gt;&lt;a href=&quot;#构建框架&quot; class=&quot;headerlink&quot; title=&quot;构建框架&quot;&gt;&lt;/a&gt;构建框架&lt;/h3&gt;&lt;p&gt;第一步，构建html框架，其中最重要的是要有一个父元素，这样就有了一个“Flex容器”，在它之中所有的子元素自动就成了容器的成员。在本例中我们将容器设置成这样&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;color-list&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;构建好容器后，接下来就是编写子元素。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>How to build your bolg On GitHub Pages</title>
    <link href="http://yoursite.com/2016/08/21/build%20my%20own%20blog/"/>
    <id>http://yoursite.com/2016/08/21/build my own blog/</id>
    <published>2016-08-21T10:46:34.000Z</published>
    <updated>2016-09-07T14:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建git仓库"><a href="#创建git仓库" class="headerlink" title="创建git仓库"></a>创建git仓库</h3><p>在自己的GitHub上创建以“username.github.io”格式为名字的仓库<br>e.g.<br><img src="http://ww1.sinaimg.cn/large/9bd18299gw1f73u79mz76j205u016744.jpg" alt=""></p>
<h3 id="安装hexo"><a href="#安装hexo" class="headerlink" title="安装hexo"></a>安装hexo</h3><p>在本地建立一个以“Blog”为名字的文件夹（可以自行决定文件夹名字啦～）,这里用于存放建立blog的原始文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ git init</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>进入刚刚建立的文件夹中安装hexo</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install -g hexo</div></pre></td></tr></table></figure>
<p>安装完以后开始初始化</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo init</div></pre></td></tr></table></figure>
<p>Hexo随后会自动在目标文件夹建立网站所需要的所有文件。</p>
<h3 id="改变bolg的样式"><a href="#改变bolg的样式" class="headerlink" title="改变bolg的样式"></a>改变bolg的样式</h3><p>可以到hexo官网寻找喜欢的主题，根据作者的提示安装</p>
<p><a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a></p>
<p>这里直接贴上网址，方便大家寻找，大家也可以去GitHub上查找主题，有很多好看的主题，安装也非常简单</p>
<p>下载以及安装完以后我们需要更改模板内容，将它变为展示自己的博客</p>
<p>在Blog文件夹的_config.yml文件里面修改相应的内容，比如：<br><img src="http://ww2.sinaimg.cn/large/9bd18299gw1f73vm7blhgj207f04bmxd.jpg" alt=""></p>
<p>与此同时，我们也要修改themes文件夹里面的_config.yml文件，修改里面的内容，比如：<br><img src="http://ww3.sinaimg.cn/large/9bd18299gw1f73vpx1hqjj20aj05sdge.jpg" alt=""></p>
<h3 id="写博文"><a href="#写博文" class="headerlink" title="写博文"></a>写博文</h3><p>Blog文件夹中可以看到一个souce文件夹，点开里面有一个子文件夹_posts，里面就装着我们每次写的博文<br><img src="http://ww2.sinaimg.cn/large/9bd18299gw1f73vya1y5tj206907daaa.jpg" alt=""></p>
<p>新建文章的话只要输入<code>hexo new &quot;postName&quot;</code>指令就可以啦</p>
<h3 id="本地查看网页样式"><a href="#本地查看网页样式" class="headerlink" title="本地查看网页样式"></a>本地查看网页样式</h3><p>如何能在本地查看自己的博客呢，我们可以运用$ hexo sever 指令，查看我们的网页效果<br><img src="http://ww2.sinaimg.cn/large/9bd18299gw1f7bxjj14vtj20ev04tt9n.jpg" alt=""><br>按”Ctrl + c”结束进程</p>
<h3 id="将本地文件部署到GitHub"><a href="#将本地文件部署到GitHub" class="headerlink" title="将本地文件部署到GitHub"></a>将本地文件部署到GitHub</h3><p>博客完成后我们需要将它部署到GitHub，这样才能和大家分享自己的网页，第一步输入以下指令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">type</span>: git</div><div class="line">repository: //输入<span class="string">"username.github.io"</span>仓库的shh</div><div class="line">branch: master</div></pre></td></tr></table></figure>
<p>第二步，安装deployer插件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>第三步，部署到GitHub</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo g</div><div class="line">$ hexo d</div></pre></td></tr></table></figure>
<p>以后每一次在本地的更新只需要输入上面的两个指令就可以啦</p>
<h3 id="查看自己的博客"><a href="#查看自己的博客" class="headerlink" title="查看自己的博客"></a>查看自己的博客</h3><p>在我们完成以上所有步骤后，只需要输入在浏览器中输入<code>{usename}.github.io</code><br>这样大家就可以访问你的博客啦～</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建git仓库&quot;&gt;&lt;a href=&quot;#创建git仓库&quot; class=&quot;headerlink&quot; title=&quot;创建git仓库&quot;&gt;&lt;/a&gt;创建git仓库&lt;/h3&gt;&lt;p&gt;在自己的GitHub上创建以“username.github.io”格式为名字的仓库&lt;br&gt;e.g.&lt;br&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/9bd18299gw1f73u79mz76j205u016744.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装hexo&quot;&gt;&lt;a href=&quot;#安装hexo&quot; class=&quot;headerlink&quot; title=&quot;安装hexo&quot;&gt;&lt;/a&gt;安装hexo&lt;/h3&gt;&lt;p&gt;在本地建立一个以“Blog”为名字的文件夹（可以自行决定文件夹名字啦～）,这里用于存放建立blog的原始文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ git init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
